import React, { useState, useEffect } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import Icon from '@/components/ui/icon';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/components/ui/use-toast';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface SecurityZone {
  id: number;
  address: string;
  status: 'armed' | 'disarmed' | 'alarm' | 'emergency' | 'suspended';
  batteryLevel: number;
  lastActivity: string;
  contractStatus: 'active' | 'suspended';
}

interface Employee {
  id: number;
  fullName: string;
  department: string;
  rank: string;
}

const Index = () => {
  const { toast } = useToast();
  const [zones, setZones] = useState<SecurityZone[]>([]);
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [selectedZone, setSelectedZone] = useState<SecurityZone | null>(null);
  const [selectedEmployees, setSelectedEmployees] = useState<number[]>([]);
  const [newEmployee, setNewEmployee] = useState({ fullName: '', department: '', rank: '' });
  const [newZone, setNewZone] = useState({ address: '', contractStatus: 'active' as const });
  const [alarmSound] = useState(new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmEiAjKr5/OpfCYDF2W86+GSZQ0JRaq+a9K+hWA6v4AvAm5lqunEhDUTJ26+3NN3JSI7kNXTojkRO3rF8N94MTJFltTHsCIYP21IyHKGG1tzQjfJrwcwJY7S0VtFTjgvLMzGbH6+3tKtb41g4PCa4KaWQHfPvwCGTU0JgdqyRLl4uh7yc9JVl3ZZaQJ');

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 400 —É—á–∞—Å—Ç–∫–æ–≤
  useEffect(() => {
    const generateZones = () => {
      const generatedZones: SecurityZone[] = [];
      for (let i = 1; i <= 400; i++) {
        const isArmed = Math.random() > 0.3;
        generatedZones.push({
          id: i,
          address: `—É–ª. ${['–õ–µ–Ω–∏–Ω–∞', '–ü—É—à–∫–∏–Ω–∞', '–°–æ–≤–µ—Ç—Å–∫–∞—è', '–ú–∏—Ä–∞', '–ì–∞–≥–∞—Ä–∏–Ω–∞', '–ü–æ–±–µ–¥—ã', '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è', '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è'][Math.floor(Math.random() * 8)]}, –¥. ${Math.floor(Math.random() * 200) + 1}`,
          status: isArmed ? 'armed' : 'disarmed',
          batteryLevel: Math.floor(Math.random() * 100) + 1,
          lastActivity: new Date(Date.now() - Math.random() * 86400000 * 7).toLocaleString('ru-RU'),
          contractStatus: Math.random() > 0.05 ? 'active' : 'suspended'
        });
      }
      return generatedZones;
    };

    const generateEmployees = () => {
      const names = ['–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '–°–∏–¥–æ—Ä–æ–≤ –°.–°.', '–ö–æ–∑–ª–æ–≤ –ö.–ö.', '–ù–æ–≤–∏–∫–æ–≤ –ù.–ù.'];
      const departments = ['–ü–∞—Ç—Ä—É–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞', '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª', '–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥'];
      const ranks = ['–†—è–¥–æ–≤–æ–π', '–ú–ª–∞–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–°–µ—Ä–∂–∞–Ω—Ç', '–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç', '–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç'];
      
      return names.map((name, index) => ({
        id: index + 1,
        fullName: name,
        department: departments[Math.floor(Math.random() * departments.length)],
        rank: ranks[Math.floor(Math.random() * ranks.length)]
      }));
    };

    setZones(generateZones());
    setEmployees(generateEmployees());

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    const interval = setInterval(() => {
      setZones(prevZones => {
        const newZones = [...prevZones];
        const randomIndex = Math.floor(Math.random() * newZones.length);
        if (newZones[randomIndex].status === 'armed') {
          newZones[randomIndex].status = 'alarm';
          // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
          try {
            alarmSound.play();
          } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤—É–∫');
          }
          toast({
            title: "üö® –¢–†–ï–í–û–ì–ê!",
            description: `–°—Ä–∞–±–æ—Ç–∞–ª–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —É—á–∞—Å—Ç–∫–µ ${newZones[randomIndex].address}`,
            variant: "destructive"
          });
        }
        return newZones;
      });
    }, 300000); // 5 –º–∏–Ω—É—Ç

    return () => clearInterval(interval);
  }, [toast]);

  const updateZoneStatus = (zoneId: number, newStatus: SecurityZone['status']) => {
    setZones(prevZones =>
      prevZones.map(zone =>
        zone.id === zoneId ? { ...zone, status: newStatus, lastActivity: new Date().toLocaleString('ru-RU') } : zone
      )
    );
  };

  const handleEmergencyCall = (zone: SecurityZone) => {
    updateZoneStatus(zone.id, 'emergency');
    // –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
    setZones(prevZones => {
      const updatedZones = prevZones.filter(z => z.id !== zone.id);
      return [{ ...zone, status: 'emergency' as const }, ...updatedZones];
    });
    toast({
      title: "üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –í–´–ó–û–í –ì–ë–†",
      description: `–í—ã–µ–∑–¥ –Ω–∞ —É—á–∞—Å—Ç–æ–∫ ${zone.address}`,
      variant: "destructive"
    });
  };

  const armedZones = zones.filter(z => z.status === 'armed').length;
  const alarmZones = zones.filter(z => z.status === 'alarm').length;
  const emergencyZones = zones.filter(z => z.status === 'emergency').length;

  const getStatusBadge = (status: SecurityZone['status']) => {
    const variants = {
      armed: { variant: 'default' as const, text: '–ù–∞ –æ—Ö—Ä–∞–Ω–µ', icon: 'Shield' },
      disarmed: { variant: 'secondary' as const, text: '–°–Ω—è—Ç —Å –æ—Ö—Ä–∞–Ω—ã', icon: 'ShieldOff' },
      alarm: { variant: 'destructive' as const, text: '–¢–†–ï–í–û–ì–ê', icon: 'AlertTriangle' },
      emergency: { variant: 'destructive' as const, text: '–í–´–ï–ó–î –ì–ë–†', icon: 'Siren' },
      suspended: { variant: 'outline' as const, text: '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', icon: 'Pause' }
    };
    const config = variants[status];
    return (
      <Badge variant={config.variant} className="flex items-center gap-1">
        <Icon name={config.icon} size={12} />
        {config.text}
      </Badge>
    );
  };

  return (
    <div className="min-h-screen bg-gray-50 font-roboto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center gap-3">
            <Icon name="Shield" size={32} className="text-blue-600" />
            <div>
              <h1 className="text-3xl font-bold text-gray-900">–ì–ë–† - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ö—Ä–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏</h1>
              <p className="text-gray-600">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto p-6">
        <Tabs defaultValue="dashboard" className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="dashboard">–ì–ª–∞–≤–Ω–∞—è</TabsTrigger>
            <TabsTrigger value="zones">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞–º–∏</TabsTrigger>
            <TabsTrigger value="monitoring">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</TabsTrigger>
            <TabsTrigger value="alarm">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π</TabsTrigger>
            <TabsTrigger value="contracts">–î–æ–≥–æ–≤–æ—Ä—ã</TabsTrigger>
            <TabsTrigger value="employees">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</TabsTrigger>
          </TabsList>

          {/* –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ */}
          <TabsContent value="dashboard" className="space-y-6">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–í—Å–µ–≥–æ —É—á–∞—Å—Ç–∫–æ–≤</CardTitle>
                  <Icon name="Building" className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">{zones.length}</div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–ù–∞ –æ—Ö—Ä–∞–Ω–µ</CardTitle>
                  <Icon name="Shield" className="h-4 w-4 text-green-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-600">{armedZones}</div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–¢—Ä–µ–≤–æ–≥–∏</CardTitle>
                  <Icon name="AlertTriangle" className="h-4 w-4 text-red-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-red-600">{alarmZones}</div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã</CardTitle>
                  <Icon name="Siren" className="h-4 w-4 text-red-600" />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-red-600">{emergencyZones}</div>
                </CardContent>
              </Card>
            </div>

            {/* –†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ */}
            <Card>
              <CardHeader>
                <CardTitle>–û–û–û "–ì–ë–† –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"</CardTitle>
                <CardDescription>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏</CardDescription>
              </CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p><strong>–ò–ù–ù:</strong> 7707123456</p>
                  <p><strong>–ö–ü–ü:</strong> 770701001</p>
                  <p><strong>–û–ì–†–ù:</strong> 1027700123456</p>
                </div>
                <div>
                  <p><strong>–ê–¥—Ä–µ—Å:</strong> –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –¥. 1</p>
                  <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> +7 (495) 123-45-67</p>
                  <p><strong>Email:</strong> info@gbr-security.ru</p>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞–º–∏ */}
          <TabsContent value="zones" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>–û—Ö—Ä–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏</CardTitle>
                <CardDescription>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –æ—Ö—Ä–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–∫–∞–º–∏</CardDescription>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>‚Ññ</TableHead>
                      <TableHead>–ê–¥—Ä–µ—Å</TableHead>
                      <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                      <TableHead>–ë–∞—Ç–∞—Ä–µ—è</TableHead>
                      <TableHead>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</TableHead>
                      <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {zones.slice(0, 20).map((zone) => (
                      <TableRow key={zone.id} className={zone.status === 'emergency' ? 'bg-red-50' : zone.status === 'alarm' ? 'bg-yellow-50' : ''}>
                        <TableCell>{zone.id}</TableCell>
                        <TableCell>{zone.address}</TableCell>
                        <TableCell>{getStatusBadge(zone.status)}</TableCell>
                        <TableCell>
                          <div className={`text-sm ${zone.batteryLevel < 20 ? 'text-red-600' : 'text-green-600'}`}>
                            {zone.batteryLevel}%
                          </div>
                        </TableCell>
                        <TableCell className="text-sm text-gray-500">{zone.lastActivity}</TableCell>
                        <TableCell>
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button variant="outline" size="sm" onClick={() => setSelectedZone(zone)}>
                                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                              </Button>
                            </DialogTrigger>
                            <DialogContent>
                              <DialogHeader>
                                <DialogTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–æ–º ‚Ññ{zone.id}</DialogTitle>
                                <DialogDescription>{zone.address}</DialogDescription>
                              </DialogHeader>
                              <div className="grid gap-4 py-4">
                                <Button 
                                  onClick={() => handleEmergencyCall(zone)}
                                  variant="destructive"
                                  className="w-full"
                                >
                                  <Icon name="Siren" className="mr-2 h-4 w-4" />
                                  –í–´–ï–ó–î –ì–ë–†
                                </Button>
                                <div className="grid grid-cols-2 gap-2">
                                  <Button 
                                    onClick={() => updateZoneStatus(zone.id, 'armed')}
                                    variant="default"
                                  >
                                    –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ—Ö—Ä–∞–Ω—É
                                  </Button>
                                  <Button 
                                    onClick={() => updateZoneStatus(zone.id, 'disarmed')}
                                    variant="secondary"
                                  >
                                    –°–Ω—è—Ç—å —Å –æ—Ö—Ä–∞–Ω—ã
                                  </Button>
                                </div>
                                <div className="grid grid-cols-2 gap-2">
                                  <Button variant="outline">–†–∞–∑—Ä—è–¥–∏—Ç—å</Button>
                                  <Button variant="outline">–ó–∞—Ä—è–¥–∏—Ç—å</Button>
                                </div>
                              </div>
                            </DialogContent>
                          </Dialog>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          {/* –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ */}
          <TabsContent value="monitoring" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã</CardTitle>
                <CardDescription>–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—á–∞—Å—Ç–∫–∞–º–∏</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-2">
                    <Button onClick={() => setSelectedEmployees(zones.map(z => z.id))}>
                      –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                    </Button>
                    <Button variant="secondary" onClick={() => setSelectedEmployees([])}>
                      –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    </Button>
                  </div>
                  <div className="grid grid-cols-4 gap-2">
                    <Button>–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ—Ö—Ä–∞–Ω—É</Button>
                    <Button variant="secondary">–°–Ω—è—Ç—å —Å –æ—Ö—Ä–∞–Ω—ã</Button>
                    <Button variant="outline">–†–∞–∑—Ä—è–¥–∏—Ç—å –±–∞—Ç–∞—Ä–µ–∏</Button>
                    <Button variant="outline">–ó–∞—Ä—è–¥–∏—Ç—å –±–∞—Ç–∞—Ä–µ–∏</Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π */}
          <TabsContent value="alarm" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π —É—á–∞—Å—Ç–∫–æ–≤</CardTitle>
                <CardDescription>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {zones.slice(0, 10).map((zone) => (
                    <div key={zone.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <p className="font-medium">–£—á–∞—Å—Ç–æ–∫ ‚Ññ{zone.id}</p>
                        <p className="text-sm text-gray-500">{zone.address}</p>
                      </div>
                      <Button variant="outline" size="sm">
                        <Icon name="TestTube" className="mr-2 h-4 w-4" />
                        –¢–µ—Å—Ç —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* –î–æ–≥–æ–≤–æ—Ä—ã */}
          <TabsContent value="contracts" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="address">–ê–¥—Ä–µ—Å —É—á–∞—Å—Ç–∫–∞</Label>
                    <Input 
                      id="address"
                      value={newZone.address}
                      onChange={(e) => setNewZone({...newZone, address: e.target.value})}
                      placeholder="—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1"
                    />
                  </div>
                  <Button className="w-full">–°–æ–∑–¥–∞—Ç—å —É—á–∞—Å—Ç–æ–∫</Button>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫" />
                    </SelectTrigger>
                    <SelectContent>
                      {zones.slice(0, 10).map((zone) => (
                        <SelectItem key={zone.id} value={zone.id.toString()}>
                          –£—á–∞—Å—Ç–æ–∫ ‚Ññ{zone.id} - {zone.address}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <div className="grid grid-cols-2 gap-2">
                    <Button variant="outline">–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä</Button>
                    <Button variant="default">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä</Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ */}
          <TabsContent value="employees" className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>–°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label htmlFor="fullName">–§–ò–û</Label>
                    <Input 
                      id="fullName"
                      value={newEmployee.fullName}
                      onChange={(e) => setNewEmployee({...newEmployee, fullName: e.target.value})}
                      placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                    />
                  </div>
                  <div>
                    <Label htmlFor="department">–û—Ç–¥–µ–ª</Label>
                    <Select value={newEmployee.department} onValueChange={(value) => setNewEmployee({...newEmployee, department: value})}>
                      <SelectTrigger>
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="patrol">–ü–∞—Ç—Ä—É–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞</SelectItem>
                        <SelectItem value="operations">–û–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–¥–µ–ª</SelectItem>
                        <SelectItem value="security">–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</SelectItem>
                        <SelectItem value="monitoring">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div>
                    <Label htmlFor="rank">–ó–≤–∞–Ω–∏–µ</Label>
                    <Select value={newEmployee.rank} onValueChange={(value) => setNewEmployee({...newEmployee, rank: value})}>
                      <SelectTrigger>
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–∞–Ω–∏–µ" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="private">–†—è–¥–æ–≤–æ–π</SelectItem>
                        <SelectItem value="junior">–ú–ª–∞–¥—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç</SelectItem>
                        <SelectItem value="sergeant">–°–µ—Ä–∂–∞–Ω—Ç</SelectItem>
                        <SelectItem value="senior">–°—Ç–∞—Ä—à–∏–π —Å–µ—Ä–∂–∞–Ω—Ç</SelectItem>
                        <SelectItem value="lieutenant">–õ–µ–π—Ç–µ–Ω–∞–Ω—Ç</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <Button className="w-full">–°–æ–∑–¥–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</Button>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    {employees.map((employee) => (
                      <div key={employee.id} className="p-3 border rounded-lg">
                        <p className="font-medium">{employee.fullName}</p>
                        <p className="text-sm text-gray-500">{employee.department} ‚Ä¢ {employee.rank}</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
};

export default Index;